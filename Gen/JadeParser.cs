//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Jade.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class JadeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, LBRACE=3, RBRACE=4, LLIST=5, RLIST=6, ASSIGN=7, DOT=8, 
		COMMA=9, COLON=10, SEMI=11, LARROW=12, RARROW=13, ARROWASSIGN=14, QUESTION=15, 
		PREDONE=16, PREDTWO=17, UNARY=18, FUNC=19, IF=20, ELSE=21, WHILE=22, IMPORT=23, 
		FROM=24, OVERRIDE=25, NEW=26, CLASS=27, PUBLIC=28, PRIVATE=29, RETURN=30, 
		BREAK=31, CONTINUE=32, REPEAT=33, UNTIL=34, UNDEFINE=35, TRY=36, CATCH=37, 
		SWITCH=38, CASE=39, DEFAULT=40, CONST=41, KW_STRING=42, KW_INT=43, KW_FLOAT=44, 
		KW_BOOL=45, KW_ARRAY=46, ALL_KWS=47, COMMENT=48, WS=49, MULTILINECOMMENT=50, 
		BOOL=51, NUL=52, APOSTROPHE=53, ID=54, INT=55, FLOAT=56, STRING=57;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_stmt = 2, RULE_caseList = 3, RULE_switchStmt = 4, 
		RULE_importStmt = 5, RULE_repeatStmt = 6, RULE_ifStmt = 7, RULE_whileStmt = 8, 
		RULE_condition = 9, RULE_tryStmt = 10, RULE_undefineStmt = 11, RULE_inheritList = 12, 
		RULE_classdef = 13, RULE_args = 14, RULE_params = 15, RULE_call = 16, 
		RULE_varAssign = 17, RULE_funcAssign = 18, RULE_getAttributes = 19, RULE_indexing = 20, 
		RULE_funcExpr = 21, RULE_expr = 22, RULE_list = 23, RULE_atom = 24;
	public static readonly string[] ruleNames = {
		"parse", "block", "stmt", "caseList", "switchStmt", "importStmt", "repeatStmt", 
		"ifStmt", "whileStmt", "condition", "tryStmt", "undefineStmt", "inheritList", 
		"classdef", "args", "params", "call", "varAssign", "funcAssign", "getAttributes", 
		"indexing", "funcExpr", "expr", "list", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "'.'", "','", "':'", 
		"';'", "'->'", "'<-'", "'=>'", "'?'", null, null, null, "'func'", "'if'", 
		"'else'", "'while'", "'import'", "'from'", "'override'", "'new'", "'class'", 
		"'public'", "'private'", "'return'", "'break'", "'continue'", "'repeat'", 
		"'until'", "'undefine'", "'try'", "'catch'", "'switch'", "'case'", "'default'", 
		"'const'", "'string'", "'int'", "'float'", "'bool'", "'array'", null, 
		null, null, null, null, "'null'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LLIST", "RLIST", "ASSIGN", 
		"DOT", "COMMA", "COLON", "SEMI", "LARROW", "RARROW", "ARROWASSIGN", "QUESTION", 
		"PREDONE", "PREDTWO", "UNARY", "FUNC", "IF", "ELSE", "WHILE", "IMPORT", 
		"FROM", "OVERRIDE", "NEW", "CLASS", "PUBLIC", "PRIVATE", "RETURN", "BREAK", 
		"CONTINUE", "REPEAT", "UNTIL", "UNDEFINE", "TRY", "CATCH", "SWITCH", "CASE", 
		"DEFAULT", "CONST", "KW_STRING", "KW_INT", "KW_FLOAT", "KW_BOOL", "KW_ARRAY", 
		"ALL_KWS", "COMMENT", "WS", "MULTILINECOMMENT", "BOOL", "NUL", "APOSTROPHE", 
		"ID", "INT", "FLOAT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jade.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JadeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JadeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JadeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JadeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 277114708645642274L) != 0) {
				{
				{
				State = 50;
				stmt();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JadeParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JadeParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				Match(LBRACE);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((_la) & ~0x3f) == 0 && ((1L << _la) & 277114708645642274L) != 0) {
					{
					{
					State = 59;
					stmt();
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65;
				Match(RBRACE);
				}
				break;
			case LPAREN:
			case LLIST:
			case UNARY:
			case FUNC:
			case IF:
			case WHILE:
			case IMPORT:
			case OVERRIDE:
			case CLASS:
			case PUBLIC:
			case PRIVATE:
			case RETURN:
			case BREAK:
			case CONTINUE:
			case REPEAT:
			case UNDEFINE:
			case TRY:
			case SWITCH:
			case CONST:
			case ALL_KWS:
			case BOOL:
			case NUL:
			case ID:
			case INT:
			case FLOAT:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncAssignContext funcAssign() {
			return GetRuleContext<FuncAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassdefContext classdef() {
			return GetRuleContext<ClassdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStmtContext repeatStmt() {
			return GetRuleContext<RepeatStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt() {
			return GetRuleContext<ImportStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndefineStmtContext undefineStmt() {
			return GetRuleContext<UndefineStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStmtContext tryStmt() {
			return GetRuleContext<TryStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(JadeParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(JadeParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(JadeParser.RETURN, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				varAssign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71;
				funcAssign();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73;
				classdef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74;
				ifStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75;
				whileStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 76;
				repeatStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 77;
				importStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 78;
				switchStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 79;
				undefineStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 80;
				tryStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 81;
				Match(BREAK);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 82;
				Match(CONTINUE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 83;
				Match(RETURN);
				State = 84;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(JadeParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 6, RULE_caseList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(CASE);
			State = 88;
			atom();
			State = 89;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(JadeParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext[] caseList() {
			return GetRuleContexts<CaseListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListContext caseList(int i) {
			return GetRuleContext<CaseListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JadeParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_switchStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(SWITCH);
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92;
					caseList();
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 98;
				Match(DEFAULT);
				State = 99;
				atom();
				State = 100;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(JadeParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(JadeParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(JadeParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(JadeParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadeParser.COMMA, i);
		}
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(IMPORT);
			State = 105;
			Match(STRING);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 106;
				Match(COMMA);
				State = 107;
				Match(STRING);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			Match(FROM);
			State = 114;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(JadeParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(JadeParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public RepeatStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStmtContext repeatStmt() {
		RepeatStmtContext _localctx = new RepeatStmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_repeatStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(REPEAT);
			State = 117;
			block();
			State = 118;
			Match(UNTIL);
			State = 119;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(JadeParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(JadeParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(JadeParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(JadeParser.ELSE, i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(IF);
			State = 122;
			condition();
			State = 123;
			block();
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 124;
					Match(ELSE);
					State = 125;
					Match(IF);
					State = 126;
					condition();
					State = 127;
					block();
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 134;
				Match(ELSE);
				State = 135;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JadeParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(WHILE);
			State = 139;
			condition();
			State = 140;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_condition);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				Match(LPAREN);
				State = 143;
				expr(0);
				State = 144;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JadeParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(JadeParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(JadeParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(JadeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(JadeParser.ID, i);
		}
		public TryStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStmtContext tryStmt() {
		TryStmtContext _localctx = new TryStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_tryStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(TRY);
			State = 150;
			block();
			State = 151;
			Match(CATCH);
			State = 152;
			Match(ID);
			State = 153;
			block();
			State = 159;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 154;
					Match(CATCH);
					State = 155;
					Match(ID);
					State = 156;
					block();
					}
					} 
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefineStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINE() { return GetToken(JadeParser.UNDEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		public UndefineStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefineStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefineStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefineStmtContext undefineStmt() {
		UndefineStmtContext _localctx = new UndefineStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_undefineStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(UNDEFINE);
			State = 163;
			Match(LPAREN);
			State = 164;
			Match(ID);
			State = 165;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(JadeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(JadeParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadeParser.COMMA, i);
		}
		public InheritListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritListContext inheritList() {
		InheritListContext _localctx = new InheritListContext(Context, State);
		EnterRule(_localctx, 24, RULE_inheritList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(ID);
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 168;
					Match(COMMA);
					State = 169;
					Match(ID);
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JadeParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(JadeParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InheritListContext inheritList() {
			return GetRuleContext<InheritListContext>(0);
		}
		public ClassdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassdefContext classdef() {
		ClassdefContext _localctx = new ClassdefContext(Context, State);
		EnterRule(_localctx, 26, RULE_classdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(CLASS);
			State = 176;
			Match(ID);
			State = 177;
			Match(RARROW);
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 178;
				inheritList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadeParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 28, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			expr(0);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 182;
				Match(COMMA);
				State = 183;
				expr(0);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(JadeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(JadeParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL_KWS() { return GetTokens(JadeParser.ALL_KWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_KWS(int i) {
			return GetToken(JadeParser.ALL_KWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JadeParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JadeParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 30, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_KWS) {
				{
				State = 189;
				Match(ALL_KWS);
				}
			}

			State = 192;
			Match(ID);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 193;
				Match(COMMA);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_KWS) {
					{
					State = 194;
					Match(ALL_KWS);
					}
				}

				State = 197;
				Match(ID);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(ID);
			State = 204;
			Match(LPAREN);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276971377083547682L) != 0) {
				{
				State = 205;
				args();
				}
			}

			State = 208;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JadeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(JadeParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_KWS() { return GetToken(JadeParser.ALL_KWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JadeParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(JadeParser.PRIVATE, 0); }
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(Context, State);
		EnterRule(_localctx, 34, RULE_varAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 210;
				_la = TokenStream.LA(1);
				if ( !(_la==PUBLIC || _la==PRIVATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONST) {
				{
				State = 213;
				Match(CONST);
				}
			}

			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_KWS) {
				{
				State = 216;
				Match(ALL_KWS);
				}
			}

			State = 219;
			Match(ID);
			State = 220;
			Match(ASSIGN);
			State = 221;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(JadeParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(JadeParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JadeParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(JadeParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_KWS() { return GetToken(JadeParser.ALL_KWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROWASSIGN() { return GetToken(JadeParser.ARROWASSIGN, 0); }
		public FuncAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncAssignContext funcAssign() {
		FuncAssignContext _localctx = new FuncAssignContext(Context, State);
		EnterRule(_localctx, 36, RULE_funcAssign);
		int _la;
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 223;
					_la = TokenStream.LA(1);
					if ( !(_la==PUBLIC || _la==PRIVATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERRIDE) {
					{
					State = 226;
					Match(OVERRIDE);
					}
				}

				State = 233;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL_KWS:
				case ID:
					{
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_KWS) {
						{
						State = 229;
						Match(ALL_KWS);
						}
					}

					}
					break;
				case FUNC:
					{
					State = 232;
					Match(FUNC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 235;
				Match(ID);
				State = 236;
				Match(LPAREN);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_KWS || _la==ID) {
					{
					State = 237;
					@params();
					}
				}

				State = 240;
				Match(RPAREN);
				State = 241;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 242;
					_la = TokenStream.LA(1);
					if ( !(_la==PUBLIC || _la==PRIVATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERRIDE) {
					{
					State = 245;
					Match(OVERRIDE);
					}
				}

				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_KWS) {
					{
					State = 248;
					Match(ALL_KWS);
					}
				}

				State = 251;
				Match(ID);
				State = 252;
				Match(LPAREN);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_KWS || _la==ID) {
					{
					State = 253;
					@params();
					}
				}

				State = 256;
				Match(RPAREN);
				State = 257;
				Match(ARROWASSIGN);
				State = 258;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JadeParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JadeParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(JadeParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(JadeParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(JadeParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(JadeParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(JadeParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(JadeParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext[] args() {
			return GetRuleContexts<ArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args(int i) {
			return GetRuleContext<ArgsContext>(i);
		}
		public GetAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetAttributesContext getAttributes() {
		GetAttributesContext _localctx = new GetAttributesContext(Context, State);
		EnterRule(_localctx, 38, RULE_getAttributes);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			atom();
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 262;
					Match(DOT);
					State = 263;
					Match(ID);
					State = 264;
					Match(LPAREN);
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276971377083547682L) != 0) {
						{
						State = 265;
						args();
						}
					}

					State = 268;
					Match(RPAREN);
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(JadeParser.LLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JadeParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIST() { return GetToken(JadeParser.RLIST, 0); }
		public IndexingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexingContext indexing() {
		IndexingContext _localctx = new IndexingContext(Context, State);
		EnterRule(_localctx, 40, RULE_indexing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			atom();
			State = 275;
			Match(LLIST);
			State = 276;
			Match(INT);
			State = 277;
			Match(RLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROWASSIGN() { return GetToken(JadeParser.ARROWASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncExprContext funcExpr() {
		FuncExprContext _localctx = new FuncExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_funcExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(ID);
			State = 280;
			Match(LPAREN);
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_KWS || _la==ID) {
				{
				State = 281;
				@params();
				}
			}

			State = 284;
			Match(RPAREN);
			State = 285;
			Match(ARROWASSIGN);
			State = 286;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNARY() { return GetToken(JadeParser.UNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GetAttributesContext getAttributes() {
			return GetRuleContext<GetAttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncExprContext funcExpr() {
			return GetRuleContext<FuncExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexingContext indexing() {
			return GetRuleContext<IndexingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JadeParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JadeParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDONE() { return GetToken(JadeParser.PREDONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREDTWO() { return GetToken(JadeParser.PREDTWO, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 289;
				atom();
				}
				break;
			case 2:
				{
				State = 290;
				call();
				}
				break;
			case 3:
				{
				State = 291;
				_localctx.op = Match(UNARY);
				State = 292;
				expr(5);
				}
				break;
			case 4:
				{
				State = 293;
				getAttributes();
				}
				break;
			case 5:
				{
				State = 294;
				funcExpr();
				}
				break;
			case 6:
				{
				State = 295;
				indexing();
				}
				break;
			case 7:
				{
				State = 296;
				Match(LPAREN);
				State = 297;
				expr(0);
				State = 298;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 308;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 302;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 303;
						_localctx.op = Match(PREDONE);
						State = 304;
						expr(8);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 305;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 306;
						_localctx.op = Match(PREDTWO);
						State = 307;
						expr(7);
						}
						break;
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(JadeParser.LLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIST() { return GetToken(JadeParser.RLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 46, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(LLIST);
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 276971377083547682L) != 0) {
				{
				State = 314;
				args();
				}
			}

			State = 317;
			Match(RLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JadeParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JadeParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(JadeParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(JadeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL() { return GetToken(JadeParser.NUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(JadeParser.BOOL, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJadeVisitor<TResult> typedVisitor = visitor as IJadeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 48, RULE_atom);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LLIST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				list();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320;
				Match(ID);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322;
				Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 323;
				Match(STRING);
				}
				break;
			case NUL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 324;
				Match(NUL);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 325;
				Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,329,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,1,1,1,5,1,61,8,1,10,1,12,1,64,9,1,1,1,1,1,3,1,68,8,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,86,8,2,1,3,1,3,1,3,
		1,3,1,4,1,4,5,4,94,8,4,10,4,12,4,97,9,4,1,4,1,4,1,4,1,4,3,4,103,8,4,1,
		5,1,5,1,5,1,5,5,5,109,8,5,10,5,12,5,112,9,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,130,8,7,10,7,12,7,133,9,7,1,
		7,1,7,3,7,137,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,148,8,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,158,8,10,10,10,12,10,161,9,10,
		1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,171,8,12,10,12,12,12,174,
		9,12,1,13,1,13,1,13,1,13,3,13,180,8,13,1,14,1,14,1,14,5,14,185,8,14,10,
		14,12,14,188,9,14,1,15,3,15,191,8,15,1,15,1,15,1,15,3,15,196,8,15,1,15,
		5,15,199,8,15,10,15,12,15,202,9,15,1,16,1,16,1,16,3,16,207,8,16,1,16,1,
		16,1,17,3,17,212,8,17,1,17,3,17,215,8,17,1,17,3,17,218,8,17,1,17,1,17,
		1,17,1,17,1,18,3,18,225,8,18,1,18,3,18,228,8,18,1,18,3,18,231,8,18,1,18,
		3,18,234,8,18,1,18,1,18,1,18,3,18,239,8,18,1,18,1,18,1,18,3,18,244,8,18,
		1,18,3,18,247,8,18,1,18,3,18,250,8,18,1,18,1,18,1,18,3,18,255,8,18,1,18,
		1,18,1,18,3,18,260,8,18,1,19,1,19,1,19,1,19,1,19,3,19,267,8,19,1,19,5,
		19,270,8,19,10,19,12,19,273,9,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,3,21,283,8,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,3,22,301,8,22,1,22,1,22,1,22,1,22,1,22,1,22,5,
		22,309,8,22,10,22,12,22,312,9,22,1,23,1,23,3,23,316,8,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,327,8,24,1,24,0,1,44,25,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,1,1,0,28,29,
		365,0,53,1,0,0,0,2,67,1,0,0,0,4,85,1,0,0,0,6,87,1,0,0,0,8,91,1,0,0,0,10,
		104,1,0,0,0,12,116,1,0,0,0,14,121,1,0,0,0,16,138,1,0,0,0,18,147,1,0,0,
		0,20,149,1,0,0,0,22,162,1,0,0,0,24,167,1,0,0,0,26,175,1,0,0,0,28,181,1,
		0,0,0,30,190,1,0,0,0,32,203,1,0,0,0,34,211,1,0,0,0,36,259,1,0,0,0,38,261,
		1,0,0,0,40,274,1,0,0,0,42,279,1,0,0,0,44,300,1,0,0,0,46,313,1,0,0,0,48,
		326,1,0,0,0,50,52,3,4,2,0,51,50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,
		54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,57,5,0,0,1,57,1,1,0,0,0,58,62,
		5,3,0,0,59,61,3,4,2,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,
		1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,68,5,4,0,0,66,68,3,4,2,0,67,58,
		1,0,0,0,67,66,1,0,0,0,68,3,1,0,0,0,69,86,3,32,16,0,70,86,3,34,17,0,71,
		86,3,36,18,0,72,86,3,44,22,0,73,86,3,26,13,0,74,86,3,14,7,0,75,86,3,16,
		8,0,76,86,3,12,6,0,77,86,3,10,5,0,78,86,3,8,4,0,79,86,3,22,11,0,80,86,
		3,20,10,0,81,86,5,31,0,0,82,86,5,32,0,0,83,84,5,30,0,0,84,86,3,44,22,0,
		85,69,1,0,0,0,85,70,1,0,0,0,85,71,1,0,0,0,85,72,1,0,0,0,85,73,1,0,0,0,
		85,74,1,0,0,0,85,75,1,0,0,0,85,76,1,0,0,0,85,77,1,0,0,0,85,78,1,0,0,0,
		85,79,1,0,0,0,85,80,1,0,0,0,85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,0,0,
		86,5,1,0,0,0,87,88,5,39,0,0,88,89,3,48,24,0,89,90,3,2,1,0,90,7,1,0,0,0,
		91,95,5,38,0,0,92,94,3,6,3,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,
		95,96,1,0,0,0,96,102,1,0,0,0,97,95,1,0,0,0,98,99,5,40,0,0,99,100,3,48,
		24,0,100,101,3,2,1,0,101,103,1,0,0,0,102,98,1,0,0,0,102,103,1,0,0,0,103,
		9,1,0,0,0,104,105,5,23,0,0,105,110,5,57,0,0,106,107,5,9,0,0,107,109,5,
		57,0,0,108,106,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,
		111,113,1,0,0,0,112,110,1,0,0,0,113,114,5,24,0,0,114,115,5,57,0,0,115,
		11,1,0,0,0,116,117,5,33,0,0,117,118,3,2,1,0,118,119,5,34,0,0,119,120,3,
		18,9,0,120,13,1,0,0,0,121,122,5,20,0,0,122,123,3,18,9,0,123,131,3,2,1,
		0,124,125,5,21,0,0,125,126,5,20,0,0,126,127,3,18,9,0,127,128,3,2,1,0,128,
		130,1,0,0,0,129,124,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,
		0,0,0,132,136,1,0,0,0,133,131,1,0,0,0,134,135,5,21,0,0,135,137,3,2,1,0,
		136,134,1,0,0,0,136,137,1,0,0,0,137,15,1,0,0,0,138,139,5,22,0,0,139,140,
		3,18,9,0,140,141,3,2,1,0,141,17,1,0,0,0,142,143,5,1,0,0,143,144,3,44,22,
		0,144,145,5,2,0,0,145,148,1,0,0,0,146,148,3,44,22,0,147,142,1,0,0,0,147,
		146,1,0,0,0,148,19,1,0,0,0,149,150,5,36,0,0,150,151,3,2,1,0,151,152,5,
		37,0,0,152,153,5,54,0,0,153,159,3,2,1,0,154,155,5,37,0,0,155,156,5,54,
		0,0,156,158,3,2,1,0,157,154,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,
		160,1,0,0,0,160,21,1,0,0,0,161,159,1,0,0,0,162,163,5,35,0,0,163,164,5,
		1,0,0,164,165,5,54,0,0,165,166,5,2,0,0,166,23,1,0,0,0,167,172,5,54,0,0,
		168,169,5,9,0,0,169,171,5,54,0,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,
		1,0,0,0,172,173,1,0,0,0,173,25,1,0,0,0,174,172,1,0,0,0,175,176,5,27,0,
		0,176,177,5,54,0,0,177,179,5,13,0,0,178,180,3,24,12,0,179,178,1,0,0,0,
		179,180,1,0,0,0,180,27,1,0,0,0,181,186,3,44,22,0,182,183,5,9,0,0,183,185,
		3,44,22,0,184,182,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,
		0,0,187,29,1,0,0,0,188,186,1,0,0,0,189,191,5,47,0,0,190,189,1,0,0,0,190,
		191,1,0,0,0,191,192,1,0,0,0,192,200,5,54,0,0,193,195,5,9,0,0,194,196,5,
		47,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,199,5,54,0,
		0,198,193,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,
		31,1,0,0,0,202,200,1,0,0,0,203,204,5,54,0,0,204,206,5,1,0,0,205,207,3,
		28,14,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,2,0,
		0,209,33,1,0,0,0,210,212,7,0,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,214,
		1,0,0,0,213,215,5,41,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,
		0,216,218,5,47,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,
		220,5,54,0,0,220,221,5,7,0,0,221,222,3,44,22,0,222,35,1,0,0,0,223,225,
		7,0,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,228,5,25,0,
		0,227,226,1,0,0,0,227,228,1,0,0,0,228,233,1,0,0,0,229,231,5,47,0,0,230,
		229,1,0,0,0,230,231,1,0,0,0,231,234,1,0,0,0,232,234,5,19,0,0,233,230,1,
		0,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,236,5,54,0,0,236,238,5,1,0,0,
		237,239,3,30,15,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,
		241,5,2,0,0,241,260,3,2,1,0,242,244,7,0,0,0,243,242,1,0,0,0,243,244,1,
		0,0,0,244,246,1,0,0,0,245,247,5,25,0,0,246,245,1,0,0,0,246,247,1,0,0,0,
		247,249,1,0,0,0,248,250,5,47,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,251,
		1,0,0,0,251,252,5,54,0,0,252,254,5,1,0,0,253,255,3,30,15,0,254,253,1,0,
		0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,2,0,0,257,258,5,14,0,0,258,
		260,3,2,1,0,259,224,1,0,0,0,259,243,1,0,0,0,260,37,1,0,0,0,261,271,3,48,
		24,0,262,263,5,8,0,0,263,264,5,54,0,0,264,266,5,1,0,0,265,267,3,28,14,
		0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,270,5,2,0,0,269,
		262,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,39,1,0,
		0,0,273,271,1,0,0,0,274,275,3,48,24,0,275,276,5,5,0,0,276,277,5,55,0,0,
		277,278,5,6,0,0,278,41,1,0,0,0,279,280,5,54,0,0,280,282,5,1,0,0,281,283,
		3,30,15,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,5,2,
		0,0,285,286,5,14,0,0,286,287,3,2,1,0,287,43,1,0,0,0,288,289,6,22,-1,0,
		289,301,3,48,24,0,290,301,3,32,16,0,291,292,5,18,0,0,292,301,3,44,22,5,
		293,301,3,38,19,0,294,301,3,42,21,0,295,301,3,40,20,0,296,297,5,1,0,0,
		297,298,3,44,22,0,298,299,5,2,0,0,299,301,1,0,0,0,300,288,1,0,0,0,300,
		290,1,0,0,0,300,291,1,0,0,0,300,293,1,0,0,0,300,294,1,0,0,0,300,295,1,
		0,0,0,300,296,1,0,0,0,301,310,1,0,0,0,302,303,10,7,0,0,303,304,5,16,0,
		0,304,309,3,44,22,8,305,306,10,6,0,0,306,307,5,17,0,0,307,309,3,44,22,
		7,308,302,1,0,0,0,308,305,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,
		311,1,0,0,0,311,45,1,0,0,0,312,310,1,0,0,0,313,315,5,5,0,0,314,316,3,28,
		14,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,318,5,6,0,0,318,
		47,1,0,0,0,319,327,3,46,23,0,320,327,5,54,0,0,321,327,5,55,0,0,322,327,
		5,56,0,0,323,327,5,57,0,0,324,327,5,52,0,0,325,327,5,51,0,0,326,319,1,
		0,0,0,326,320,1,0,0,0,326,321,1,0,0,0,326,322,1,0,0,0,326,323,1,0,0,0,
		326,324,1,0,0,0,326,325,1,0,0,0,327,49,1,0,0,0,39,53,62,67,85,95,102,110,
		131,136,147,159,172,179,186,190,195,200,206,211,214,217,224,227,230,233,
		238,243,246,249,254,259,266,271,282,300,308,310,315,326
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
